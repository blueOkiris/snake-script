<raw-type-name> ::= /([#@])|(\?\?)/
<ident>         ::= /[A-Za-z_]+/
<num>           ::= /([0-9]+\.?|[0-9]*\.[0-9]+)(e[0-9]+)?/
<bool>          ::= /(\?t|\?f)/
<char>          ::= /'(\\.|[^'])'/
<while-op>      ::= /\[\?\]/
<return>        ::= /<</
<stack-op>      ::= /(>>|><|<>)/
<ls-tp-op>      ::= /(++|--|@@|\]\[|\[\])/
<math-op>       ::= /[+-*\/\^]/
<bool-op>       ::= /\?[><=!&\|]/
<mk-tup>        ::= /\(\)/
<to-str>        ::= /\$/
<to-chr>        ::= /`/
<parse-str>     ::= /!\?/
<to-bool>       ::= /\?/
<str>           ::= /'(\\.|[^'])*'/
<func-op>       ::= /\\/
<l-bracket>     ::= /\[/
<r-bracket>     ::= /\]/
<l-parenth>     ::= /\(/
<r-parenth>     ::= /\)/
<l-brace>       ::= /\{/
<r-brace>       ::= /\}/
<type-op>       ::= /:/

<type>          ::= <raw-type-name> | <l-bracket> <type> <r-bracket>
                    | <l-parenth> <type> <type> <r-parenth>
<list>          ::= <l-bracket> { <value> } <r-bracket>
<tuple>         ::= <l-parenth> <value> <value> <r-parenth>
<value>         ::= <ident> | <char> | <num> | <bool> | <str> | <list> | <tuple>
<op>            ::= <stack-op> | <math-op> | <bool-op> | <ls-tp-op>
<func-call>     ::= <l-parenth> <ident> <r-parenth>
<stmt>          ::= <op> | <while> | <func-call> | <return> | <value> | <to-str>
                    | <to-chr> | <mk-tup> | <parse-str> | <to-bool>
<while>         ::= <while-op> <body>
<body>          ::= <l-brace> { <stmt> } <r-brace>
<func-def>      ::= <func-op> <ident> <type-op> <type> <bool-op> <type> <body>
<program>       ::= { <func-def> | <stmt> }
